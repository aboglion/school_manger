import sqlite3 from 'sqlite3';

const db = new sqlite3.Database('mydata.db');

// Execute the SQLite table creation statements
const createTables2 = `
// CREATE TABLE STUDENT (
//     NAME_STUDENT TEXT,
//     phone INTEGER,
//     email TEXT,
//     ID_ INTEGER PRIMARY KEY
// );

CREATE TABLE TEACHER (
    ID_ INTEGER PRIMARY KEY ,
    NAME_TEACHER TEXT,
    GMAIL TEXT,
    Phone INTEGER NOT NULL,
    ADDRESS TEXT
);


CREATE TABLE COURSE (
    ID_COURSE INTEGER PRIMARY KEY AUTOINCREMENT,
    Name_Course TEXT NOT NULL,
    infromation TEXT NOT NULL,
    ID_TEACHER INTEGER,
    start_date DATE,
    start_time TIME,
    end_date DATE,
    end_time TIME,
    FOREIGN KEY (ID_TEACHER) REFERENCES TEACHER(ID_)
);


CREATE TABLE REGISTRATION_FOR_COURSE (
    ID_REGISTRATION_FOR_COURSE INTEGER PRIMARY KEY AUTOINCREMENT,
    ID_COURSE INTEGER,
    ID_STUDENT INTEGER,
    MARK INTEGER,
    PRESENCE INTEGER

    FOREIGN KEY (ID_COURSE) REFERENCES COURSE(ID_COURSE),
    FOREIGN KEY (ID_STUDENT) REFERENCES STUDENT(ID_)
);


CREATE TABLE CLASS (
    ID_CLASS INTEGER PRIMARY KEY AUTOINCREMENT,
    SEAT_NUMBER INTEGER NOT NULL,
    CLASS_NAME TEXT,
    TAYP TEXT
);
`
const createTables3 = `
CREATE TABLE CLASS_MANAGEMENT (
    ID_CLASS_MANAGEMENT INTEGER PRIMARY KEY AUTOINCREMENT,
    ID_COURSE INTEGER,
    ID_CLASS INTEGER,
    start_date DATE,
    start_time TIME,
    end_time TIME,
    FOREIGN KEY (ID_COURSE) REFERENCES COURSE(ID_COURSE),
    FOREIGN KEY (ID_CLASS) REFERENCES CLASS(ID_CLASS)
);


CREATE TABLE INFORMATION_COURSE (
    ID_INFORMATION_COURSE INTEGER PRIMARY KEY AUTOINCREMENT,
    ID_COURSE INTEGER,
    INFORMATION_COURSE TEXT,
    SERVING_TIME DATE,
    FOREIGN KEY (ID_COURSE) REFERENCES COURSE(ID_COURSE)
);
`
const createTables = `

 CREATE TABLE LESSON (
  ID_LESSON INTEGER PRIMARY KEY AUTOINCREMENT,
  ID_COURSE INTEGER,
  HOMEWORKLBL TEXT, 
  HOMEWORKBDF BLOB,
  LESSON_CONTENT TEXT,
  LESSON_DATE DATE,
  start_time TIME,
  end_time TIME,
  LESSON_DATA BLOB,
  FOREIGN KEY (ID_COURSE) REFERENCES COURSE(ID_COURSE)
);

CREATE TABLE ATTENDANCE (
  ID_ATTENDANCE INTEGER PRIMARY KEY AUTOINCREMENT,
  ID_STUDENT INTEGER,
  ID_LESSON INTEGER,
  DATE DATE,
  PRESENT BOOLEAN DEFAULT false,
  FOREIGN KEY (ID_STUDENT) REFERENCES STUDENT(ID_),
  FOREIGN KEY (ID_LESSON) REFERENCES LESSON(ID_LESSON)
);

 CREATE TABLE HOMEWORK_SUBMISSION (
  ID_SUBMISSION INTEGER PRIMARY KEY AUTOINCREMENT,
  ID_STUDENT INTEGER,
  ID_LESSON INTEGER,
  SUBMISSION_DATE DATE,
  FILE_NAME TEXT,
  FILE_DATA BLOB
  MARKS_RECEIVED INTEGER,
  FOREIGN KEY (ID_STUDENT) REFERENCES STUDENT(ID_),
  FOREIGN KEY (ID_LESSON) REFERENCES LESSON(ID_LESSON)
);

CREATE TABLE IF NOT EXISTS USERS (
    ID_USERS INTEGER PRIMARY KEY AUTOINCREMENT,
    ID_STUDENT INTEGER primary key,
    ID_TEACHER INTEGER primary key,
    USER_NAME TEXT,
    PASSWORD TEXT,
    BLOCKED bool default true,
    USER_TYPE TEXT,
    FOREIGN KEY (ID_STUDENT) REFERENCES STUDENT(ID_),
    FOREIGN KEY (ID_TEACHER) REFERENCES TEACHER(ID_)
);
`
;

db.serialize(() => {
  db.run(createTables, (err) => {
    if (err) {
      console.error(err.message);
    } else {
      console.log('Tables created successfully.');
    }

    // Close the database connection
    db.close();
  });
})
