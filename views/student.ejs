<!DOCTYPE html>
<html lang="he" dir="rtl">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>עמוד תלמיד</title>
  <link rel="stylesheet" href="/css/student.css">
  <link href="https://fonts.googleapis.com/css2?family=Rubik:wght@400;500;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <link rel="stylesheet" href="/css/shared-schedule.css">
  <style>
    .schedule-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }
    
    #download-schedule-pdf {
      background-color: #4CAF50;
      color: white;
      border: none;
      padding: 8px 16px;
      border-radius: 4px;
      cursor: pointer;
      font-family: 'Rubik', sans-serif;
      display: flex;
      align-items: center;
      gap: 8px;
      transition: background-color 0.3s;
    }
    
    #download-schedule-pdf:hover {
      background-color: #45a049;
    }
    
    /* Set regular cursor for lesson items */
    .lesson-item {
      cursor: default; /* Regular arrow cursor */
    }
    
    /* Remove hover effects specifically for course names */
    .lesson-title, .lesson-title:hover {
      color: inherit !important; /* Keep original color */
      text-decoration: none !important; /* Remove any underline */
      font-weight: inherit !important; /* Keep original font weight */
      transform: none !important; /* Prevent any transform */
      transition: none !important; /* Disable transitions */
    }
    
    /* Keep the tooltip but make it non-interactive */
    .lesson-tooltip {
      pointer-events: none;
    }
    
    @media print {
      .tabs, header, .tab:not(.active) {
        display: none !important;
      }
      
      .tab-content.active {
        display: block !important;
      }
      
      #download-schedule-pdf {
        display: none;
      }
    }
  </style>
</head>
<body>
  <header>
    <h1>ברוך הבא, <span id="student-name"><%= studentName %></span></h1>
    <a href="/logout" class="logout-button">
      <i class="fas fa-sign-out-alt"></i> יציאה
    </a>
  </header>

  <main>
    <div class="tabs">
      <div class="tab active" onclick="openTab(event, 'dashboard')">
        <i class="fas fa-tachometer-alt"></i> לוח בקרה
      </div>
      <div class="tab" onclick="openTab(event, 'courses')">
        <i class="fas fa-book"></i> קורסים
      </div>
      <div class="tab" onclick="openTab(event, 'schedule')">
        <i class="fas fa-calendar-alt"></i> מערכת שעות
      </div>
      <div class="tab" onclick="openTab(event, 'homework')">
        <i class="fas fa-tasks"></i> עבודות בית
      </div>
      <div class="tab" onclick="openTab(event, 'attendance')">
        <i class="fas fa-user-check"></i> נוכחות
      </div>
    </div>

    <!-- Dashboard Tab -->
    <div id="dashboard" class="tab-content active">
      <% if (conflicts && conflicts.length > 0) { %>
        <section class="conflict-alert">
          <h3><i class="fas fa-exclamation-triangle"></i> שים לב! נמצאו חפיפות במערכת השעות שלך:</h3>
          <% conflicts.forEach(conflict => { %>
            <div class="conflict-item">
              <p><strong><i class="fas fa-calendar-day"></i> תאריך:</strong> <%= new Date(conflict.date).toLocaleDateString('he-IL') %></p>
              <p><strong><i class="fas fa-book"></i> קורס 1:</strong> <%= conflict.course1 %> (<%= conflict.time1 %>)</p>
              <p><strong><i class="fas fa-book"></i> קורס 2:</strong> <%= conflict.course2 %> (<%= conflict.time2 %>)</p>
            </div>
          <% }); %>
        </section>
      <% } %>

      <section>
        <h2><i class="fas fa-calendar-check"></i> שיעורים קרובים</h2>
        <table>
          <thead>
            <tr>
              <th>תאריך</th>
              <th>קורס</th>
              <th>שעות</th>
            </tr>
          </thead>
          <tbody>
            <%
              const today = new Date();
              const upcomingLessons = schedule.filter(course => {
                const lessonDate = new Date(course.LESSON_DATE);
                return lessonDate >= today;
              }).slice(0, 5);
            %>
            <% if (upcomingLessons.length > 0) { %>
              <% upcomingLessons.forEach(course => { %>
                <tr>
                  <td><%= new Date(course.LESSON_DATE).toLocaleDateString('he-IL') %></td>
                  <td><%= course.Name_Course %></td>
                  <td><i class="far fa-clock"></i> <%= course.start_time %> - <%= course.end_time %></td>
                </tr>
              <% }); %>
            <% } else { %>
              <tr>
                <td colspan="3" style="text-align: center;">אין שיעורים קרובים</td>
              </tr>
            <% } %>
          </tbody>
        </table>
      </section>

      <section>
        <h2><i class="fas fa-clipboard-list"></i> עבודות להגשה</h2>
        <%
          const pendingHomeworks = homeworks.filter(hw => !hw.ID_SUBMISSION && new Date(hw.DEADLINE) >= today);
          const upcomingDeadlines = pendingHomeworks.sort((a, b) => new Date(a.DEADLINE) - new Date(b.DEADLINE)).slice(0, 3);
        %>
        <% if (upcomingDeadlines.length > 0) { %>
          <% upcomingDeadlines.forEach(homework => { %>
            <div class="homework-item">
              <h3><%= homework.HOMEWORKLBL %></h3>
              <div class="homework-meta">
                <span><i class="fas fa-book"></i> קורס: <%= homework.Name_Course %></span>
                <span><i class="fas fa-calendar-day"></i> תאריך הגשה: <%= new Date(homework.DEADLINE).toLocaleDateString('he-IL') %></span>
              </div>
              <a href="/student/course/<%= homework.ID_COURSE %>" class="btn">
                <i class="fas fa-external-link-alt"></i> לעמוד הקורס
              </a>
            </div>
          <% }); %>
        <% } else { %>
          <div class="empty-state">
            <i class="fas fa-check-circle"></i>
            <p>אין עבודות להגשה בקרוב</p>
          </div>
        <% } %>
      </section>
    </div>

    <!-- Courses Tab -->
    <div id="courses" class="tab-content">
      <section class="courses-section">
        <h2><i class="fas fa-book"></i> רשימת קורסים</h2>
        <div class="courses-grid">
          <% if (courses && courses.length > 0) { %>
            <% courses.forEach(course => { %>
              <div class="course-card">
                <a href="/student/course/<%= course.ID_COURSE %>">
                  <h3><i class="fas fa-graduation-cap"></i> <%= course.Name_Course %></h3>
                  <p><%= course.infromation || 'אין תיאור' %></p>
                  <div class="course-card-footer">
                    <span><i class="fas fa-arrow-left"></i> לפרטים נוספים</span>
                  </div>
                </a>
              </div>
            <% }); %>
          <% } else { %>
            <div class="empty-state">
              <i class="fas fa-info-circle"></i>
              <p>אין קורסים רשומים</p>
            </div>
          <% } %>
        </div>
      </section>
    </div>

    <!-- Schedule Tab -->
    <div id="schedule" class="tab-content">
      <section class="schedule-section">
        <div class="schedule-header">
          <h2><i class="fas fa-calendar-week"></i> מערכת שעות שבועית</h2>
          <button id="download-schedule-pdf" class="btn">
            <i class="fas fa-file-pdf"></i> הורד מערכת שעות כ-PDF
          </button>
        </div>
        
        <div class="improved-schedule-container">
          <div class="time-column">
            <div class="time-header"><i class="fas fa-clock"></i></div>
            <%
              // Define time slots
              const timeSlots = [
                "08:00", "09:00", "10:00", "11:00", "12:00",
                "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00"
              ];
            %>
            <% timeSlots.forEach(time => { %>
              <div class="time-slot"><%= time %></div>
            <% }); %>
          </div>
          
          <div class="days-container">
            <%
              const days = ['ראשון', 'שני', 'שלישי', 'רביעי', 'חמישי', 'שישי'];
              
              // Prepare the next 7 days
              const nextWeekDays = [];
              for (let i = 0; i < 7; i++) {
                const day = new Date(today);
                day.setDate(today.getDate() + i);
                nextWeekDays.push(day);
              }
            %>
            
            <% days.forEach((dayName, index) => { %>
              <div class="day-column">
                <div class="day-header">
                  <div><i class="fas fa-calendar-day"></i> <%= dayName %></div>
                  <div class="day-date"><%= nextWeekDays[index].toLocaleDateString('he-IL') %></div>
                </div>
                <div class="day-lessons">
                  <% timeSlots.forEach(timeSlot => { %>
                    <div class="time-cell">
                      <%
                        // Find lessons for this day and time slot
                        const dayLessons = schedule.filter(course => {
                          const lessonDate = new Date(course.LESSON_DATE);
                          return lessonDate.toDateString() === nextWeekDays[index].toDateString();
                        });
                        
                        // Find lessons that fall within this time slot
                        const lessonsInSlot = dayLessons.filter(lesson => {
                          // Get the hour part of the time slot (e.g., "08" from "08:00")
                          const timeSlotHour = parseInt(timeSlot.split(':')[0]);
                          
                          // Get the hour parts of the lesson start and end times
                          const lessonStartHour = parseInt(lesson.start_time.split(':')[0]);
                          const lessonEndHour = parseInt(lesson.end_time.split(':')[0]);
                          
                          // Check if the time slot hour is within the lesson hours
                          return lessonStartHour <= timeSlotHour && lessonEndHour > timeSlotHour;
                        });
                      %>
                      
                      <% if (lessonsInSlot.length > 0) { %>
                        <% lessonsInSlot.forEach(lesson => { %>
                          <%
                            // Debug: Log the lesson object to see what properties are available
                            console.log("Lesson object:", lesson);
                            
                            // Get the course ID from the lesson object - check all possible property names
                            const courseId = lesson.ID_COURSE || lesson.COURSE_ID || lesson.id_course || lesson.courseId || lesson.course_id;
                            
                            // Additional debugging to see what we're getting
                            console.log("Course ID extracted:", courseId);
                            
                            // Ensure we have a valid course ID
                            const validCourseId = courseId || '';
                          %>
                          <div class="lesson-item" data-course-id="<%= validCourseId %>">
                            <div class="lesson-tooltip">
                              <strong><%= lesson.Name_Course %></strong>
                              <p>זמן: <%= lesson.start_time %> - <%= lesson.end_time %></p>
                              <% if (lesson.infromation) { %>
                                <p>מידע: <%= lesson.infromation %></p>
                              <% } %>
                              <small>לחץ לצפייה בדף הקורס</small>
                            </div>
                            <div class="lesson-title"><i class="fas fa-book"></i> <%= lesson.Name_Course %></div>
                            <div class="lesson-time"><i class="far fa-clock"></i> <%= lesson.start_time %> - <%= lesson.end_time %></div>
                          </div>
                        <% }); %>
                      <% } %>
                    </div>
                  <% }); %>
                </div>
              </div>
            <% }); %>
          </div>
        </div>
      </section>
      
      <section class="schedule-list-section">
        <h2><i class="fas fa-list"></i> רשימת שיעורים השבוע</h2>
        <div class="schedule-table">
          <table>
            <thead>
              <tr>
                <th><i class="fas fa-calendar-day"></i> יום</th>
                <th><i class="fas fa-calendar"></i> תאריך</th>
                <th><i class="fas fa-book"></i> קורס</th>
                <th><i class="fas fa-hourglass-start"></i> שעת התחלה</th>
                <th><i class="fas fa-hourglass-end"></i> שעת סיום</th>
              </tr>
            </thead>
            <tbody>
              <%
                const weeklySchedule = schedule.filter(course => {
                  const lessonDate = new Date(course.LESSON_DATE);
                  const daysAhead = (lessonDate - today) / (1000 * 60 * 60 * 24);
                  return daysAhead >= 0 && daysAhead <= 7;
                }).sort((a, b) => new Date(a.LESSON_DATE) - new Date(b.LESSON_DATE));
              %>
              <% if (weeklySchedule.length > 0) { %>
                <% weeklySchedule.forEach(course => { %>
                  <% const lessonDate = new Date(course.LESSON_DATE); %>
                  <tr>
                    <td><%= ['ראשון', 'שני', 'שלישי', 'רביעי', 'חמישי', 'שישי'][lessonDate.getDay()] %></td>
                    <td><%= lessonDate.toLocaleDateString('he-IL') %></td>
                    <td><%= course.Name_Course %></td>
                    <td><%= course.start_time %></td>
                    <td><%= course.end_time %></td>
                  </tr>
                <% }); %>
              <% } else { %>
                <tr>
                  <td colspan="5" style="text-align: center;">אין שיעורים בשבוע הקרוב</td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
      </section>
    </div>

    <!-- Homework Tab -->
    <div id="homework" class="tab-content">
      <section>
        <h2><i class="fas fa-tasks"></i> עבודות בית</h2>
        <%
          // Group homeworks by status
          const pendingHomeworksList = homeworks.filter(hw => !hw.ID_SUBMISSION && new Date(hw.DEADLINE) >= today);
          const submittedHomeworks = homeworks.filter(hw => hw.ID_SUBMISSION && hw.MARKS_RECEIVED === null);
          const gradedHomeworks = homeworks.filter(hw => hw.ID_SUBMISSION && hw.MARKS_RECEIVED !== null);
          const lateHomeworks = homeworks.filter(hw => !hw.ID_SUBMISSION && new Date(hw.DEADLINE) < today);
        %>

        <% if (pendingHomeworksList.length > 0) { %>
          <h3><i class="fas fa-hourglass-half"></i> עבודות להגשה</h3>
          <% pendingHomeworksList.forEach(homework => { %>
            <div class="homework-item">
              <h3><%= homework.HOMEWORKLBL %></h3>
              <div class="homework-meta">
                <span><i class="fas fa-book"></i> קורס: <%= homework.Name_Course %></span>
                <span><i class="fas fa-calendar-day"></i> תאריך הגשה: <%= new Date(homework.DEADLINE).toLocaleDateString('he-IL') %></span>
              </div>
              <span class="homework-status status-pending"><i class="fas fa-clock"></i> ממתין להגשה</span>
              <p>
                <a href="/student/course/<%= homework.ID_COURSE %>" class="btn">
                  <i class="fas fa-upload"></i> הגש עבודה
                </a>
              </p>
            </div>
          <% }); %>
        <% } %>

        <% if (submittedHomeworks.length > 0) { %>
          <h3><i class="fas fa-paper-plane"></i> עבודות שהוגשו</h3>
          <% submittedHomeworks.forEach(homework => { %>
            <div class="homework-item">
              <h3><%= homework.HOMEWORKLBL %></h3>
              <div class="homework-meta">
                <span><i class="fas fa-book"></i> קורס: <%= homework.Name_Course %></span>
                <span><i class="fas fa-calendar-day"></i> תאריך הגשה: <%= new Date(homework.DEADLINE).toLocaleDateString('he-IL') %></span>
                <span><i class="fas fa-calendar-check"></i> הוגש בתאריך: <%= new Date(homework.SUBMISSION_DATE).toLocaleDateString('he-IL') %></span>
              </div>
              <span class="homework-status status-submitted"><i class="fas fa-check-circle"></i> הוגש - ממתין לבדיקה</span>
              <p>
                <a href="/student/course/<%= homework.ID_COURSE %>" class="btn btn-secondary">
                  <i class="fas fa-sync-alt"></i> הגש מחדש
                </a>
              </p>
            </div>
          <% }); %>
        <% } %>

        <% if (gradedHomeworks.length > 0) { %>
          <h3><i class="fas fa-check-double"></i> עבודות שנבדקו</h3>
          <% gradedHomeworks.forEach(homework => { %>
            <div class="homework-item">
              <h3><%= homework.HOMEWORKLBL %></h3>
              <div class="homework-meta">
                <span><i class="fas fa-book"></i> קורס: <%= homework.Name_Course %></span>
                <span><i class="fas fa-calendar-day"></i> תאריך הגשה: <%= new Date(homework.DEADLINE).toLocaleDateString('he-IL') %></span>
                <span><i class="fas fa-calendar-check"></i> הוגש בתאריך: <%= new Date(homework.SUBMISSION_DATE).toLocaleDateString('he-IL') %></span>
              </div>
              <span class="homework-status status-graded"><i class="fas fa-award"></i> ציון: <%= homework.MARKS_RECEIVED %></span>
            </div>
          <% }); %>
        <% } %>

        <% if (lateHomeworks.length > 0) { %>
          <h3><i class="fas fa-exclamation-triangle"></i> עבודות שלא הוגשו בזמן</h3>
          <% lateHomeworks.forEach(homework => { %>
            <div class="homework-item">
              <h3><%= homework.HOMEWORKLBL %></h3>
              <div class="homework-meta">
                <span><i class="fas fa-book"></i> קורס: <%= homework.Name_Course %></span>
                <span><i class="fas fa-calendar-day"></i> תאריך הגשה: <%= new Date(homework.DEADLINE).toLocaleDateString('he-IL') %></span>
              </div>
              <span class="homework-status status-late"><i class="fas fa-exclamation-circle"></i> איחור בהגשה</span>
              <p>
                <a href="/student/course/<%= homework.ID_COURSE %>" class="btn">
                  <i class="fas fa-upload"></i> הגש באיחור
                </a>
              </p>
            </div>
          <% }); %>
        <% } %>

        <% if (pendingHomeworksList.length === 0 && submittedHomeworks.length === 0 && gradedHomeworks.length === 0 && lateHomeworks.length === 0) { %>
          <div class="empty-state">
            <i class="fas fa-check-circle"></i>
            <p>אין עבודות בית</p>
          </div>
        <% } %>
      </section>
    </div>

    <!-- Attendance Tab -->
    <div id="attendance" class="tab-content">
      <section>
        <h2><i class="fas fa-user-check"></i> סיכום נוכחות</h2>
        <%
          const totalClasses = attendance.length;
          const presentCount = attendance.filter(a => a.PRESENT === 1).length;
          const absentCount = totalClasses - presentCount;
          const attendanceRate = totalClasses > 0 ? Math.round((presentCount / totalClasses) * 100) : 0;
        %>
        <div class="attendance-summary">
          <div class="attendance-stat">
            <h3><i class="fas fa-chalkboard"></i> שיעורים סה"כ</h3>
            <p><%= totalClasses %></p>
          </div>
          <div class="attendance-stat">
            <h3><i class="fas fa-user-check"></i> נוכחות</h3>
            <p><%= presentCount %></p>
          </div>
          <div class="attendance-stat">
            <h3><i class="fas fa-user-times"></i> היעדרות</h3>
            <p><%= absentCount %></p>
          </div>
          <div class="attendance-stat">
            <h3><i class="fas fa-percentage"></i> אחוז נוכחות</h3>
            <p><%= attendanceRate %>%</p>
            <div class="progress-bar" data-value="<%= attendanceRate %>%">
              <div class="progress"></div>
            </div>
          </div>
        </div>

        <h3><i class="fas fa-history"></i> היסטוריית נוכחות</h3>
        <div class="attendance-list">
          <% if (attendance && attendance.length > 0) { %>
            <% attendance.forEach(record => { %>
              <div class="attendance-item">
                <div>
                  <strong><i class="fas fa-book"></i> <%= record.Name_Course %></strong>
                  <span><i class="fas fa-calendar-day"></i> <%= new Date(record.LESSON_DATE).toLocaleDateString('he-IL') %></span>
                </div>
                <div class="<%= record.PRESENT === 1 ? 'attendance-present' : 'attendance-absent' %>">
                  <% if (record.PRESENT === 1) { %>
                    <i class="fas fa-check-circle"></i> נוכח
                  <% } else { %>
                    <i class="fas fa-times-circle"></i> לא נוכח
                  <% } %>
                </div>
              </div>
            <% }); %>
          <% } else { %>
            <div class="empty-state">
              <i class="fas fa-info-circle"></i>
              <p>אין נתוני נוכחות</p>
            </div>
          <% } %>
        </div>
        
        <p>
          <a href="/student/attendance-history" class="btn">
            <i class="fas fa-history"></i> צפייה בהיסטוריית נוכחות מלאה
          </a>
        </p>
      </section>
    </div>
  </main>

  <!-- Add html2pdf.js library -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
  
  <script>
    // PDF Download functionality
    document.addEventListener('DOMContentLoaded', function() {
      const downloadButton = document.getElementById('download-schedule-pdf');
      if (downloadButton) {
        downloadButton.addEventListener('click', function() {
          // Get the schedule content
          const scheduleContent = document.querySelector('.improved-schedule-container');
          const scheduleList = document.querySelector('.schedule-list-section');
          
          // Create a container for the PDF content
          const pdfContent = document.createElement('div');
          pdfContent.style.direction = 'rtl';
          pdfContent.style.fontFamily = 'Rubik, Arial, sans-serif';
          
          // Add a title
          const title = document.createElement('h1');
          title.textContent = 'מערכת שעות שבועית';
          title.style.textAlign = 'center';
          title.style.marginBottom = '20px';
          pdfContent.appendChild(title);
          
          // Add student name
          const studentName = document.getElementById('student-name').textContent;
          const nameElement = document.createElement('h2');
          nameElement.textContent = 'תלמיד: ' + studentName;
          nameElement.style.textAlign = 'center';
          nameElement.style.marginBottom = '30px';
          pdfContent.appendChild(nameElement);
          
          // Clone the schedule list (table view) as it's more suitable for PDF
          const scheduleListClone = scheduleList.cloneNode(true);
          pdfContent.appendChild(scheduleListClone);
          
          // Set options for html2pdf
          const options = {
            margin: 10,
            filename: 'מערכת_שעות_' + new Date().toLocaleDateString('he-IL') + '.pdf',
            image: { type: 'jpeg', quality: 0.98 },
            html2canvas: { scale: 2, useCORS: true },
            jsPDF: { unit: 'mm', format: 'a4', orientation: 'landscape' }
          };
          
          // Generate and download the PDF
          html2pdf().from(pdfContent).set(options).save();
        });
      }
    });
    
    // Tab switching functionality
    function openTab(evt, tabName) {
      // Hide all tab contents
      const tabContents = document.getElementsByClassName("tab-content");
      for (let i = 0; i < tabContents.length; i++) {
        tabContents[i].classList.remove("active");
      }
      
      // Deactivate all tabs
      const tabs = document.getElementsByClassName("tab");
      for (let i = 0; i < tabs.length; i++) {
        tabs[i].classList.remove("active");
      }
      
      // Show the selected tab content and activate the tab
      document.getElementById(tabName).classList.add("active");
      evt.currentTarget.classList.add("active");
      
      // Save the active tab to localStorage
      localStorage.setItem('activeStudentTab', tabName);
    }
    
    // Check if there's a saved tab in localStorage and activate it
    document.addEventListener('DOMContentLoaded', function() {
      const savedTab = localStorage.getItem('activeStudentTab');
      if (savedTab && document.getElementById(savedTab)) {
        // Find the tab element
        const tabs = document.getElementsByClassName("tab");
        for (let i = 0; i < tabs.length; i++) {
          if (tabs[i].getAttribute('onclick').includes(savedTab)) {
            // Simulate a click on the saved tab
            tabs[i].click();
            break;
          }
        }
      }
      
      // Initialize any animations or interactive elements
      const progressBars = document.querySelectorAll('.progress');
      progressBars.forEach(bar => {
        // Add a small delay for a nice animation effect
        setTimeout(() => {
          bar.style.width = bar.parentElement.dataset.value || '0%';
        }, 300);
      });
      
      // Apply unique colors to lessons based on course ID
      applyCoursesColors();
    });
    
    // Function to generate a unique color based on course ID
    function generateCourseColor(courseId) {
      // Convert courseId to a number if it's not already
      const id = parseInt(courseId);
      
      // Use the course ID to generate a hue value (0-360)
      // Multiply by a prime number to get better distribution
      const hue = (id * 83) % 360;
      
      // Use a fixed saturation and lightness to ensure readability
      // Lightness should be high enough for text to be visible (50-80%)
      const saturation = 70; // 70%
      const lightness = 65;  // 65%
      
      // Return the HSL color
      return `hsl(${hue}, ${saturation}%, ${lightness}%)`;
    }
    
    // Function to generate a border color (darker version of the background)
    function generateBorderColor(courseId) {
      const id = parseInt(courseId);
      const hue = (id * 83) % 360;
      const saturation = 70; // 70%
      const lightness = 45;  // Darker than the background
      
      return `hsl(${hue}, ${saturation}%, ${lightness}%)`;
    }
    
    // Apply colors to all lesson items
    function applyCoursesColors() {
      const lessonItems = document.querySelectorAll('.lesson-item[data-course-id]');
      
      lessonItems.forEach(item => {
        const courseId = item.getAttribute('data-course-id');
        if (courseId) {
          const backgroundColor = generateCourseColor(courseId);
          const borderColor = generateBorderColor(courseId);
          
          item.style.backgroundColor = backgroundColor;
          item.style.borderRight = `3px solid ${borderColor}`;
          
          // Ensure text is readable by setting a contrasting text color
          // For lighter backgrounds, use dark text; for darker backgrounds, use light text
          const lightness = parseInt(courseId) * 83 % 100;
          if (lightness > 70) {
            item.style.color = '#333'; // Dark text for light backgrounds
          } else {
            item.style.color = '#fff'; // Light text for dark backgrounds
          }
        }
      });
    }
  </script>
</body>
</html>
