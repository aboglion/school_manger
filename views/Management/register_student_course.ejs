<!DOCTYPE html>
<html lang="he" dir="rtl">
<head>
  <meta charset="UTF-8">
  <title>רישום תלמיד לקורס</title>
  <link rel="stylesheet" href="/css/Management/register_student_course.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <style>
    body {
      font-family: 'Rubik', Arial, sans-serif;
      background-color: #f4f4f4;
      margin: 0;
      padding: 0;
    }

    header {
      background-color: #4CAF50;
      color: white;
      text-align: center;
      padding: 1em 0;
      position: relative;
    }

    .back-button {
      position: absolute;
      top: 10px;
      left: 10px;
      background-color: white;
      color: #4CAF50;
      padding: 5px 10px;
      border-radius: 4px;
      text-decoration: none;
      font-weight: bold;
    }
    
    .main-button {
      position: absolute;
      top: 10px;
      left: 100px;
      background-color: white;
      color: #4CAF50;
      padding: 5px 10px;
      border-radius: 4px;
      text-decoration: none;
      font-weight: bold;
    }

    main {
      max-width: 1200px;
      margin: 2em auto;
      padding: 2em;
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .registration-container {
      display: flex;
      flex-direction: column;
      gap: 2em;
    }

    .selection-panel {
      display: flex;
      justify-content: center;
      gap: 2em;
    }

    .student-selection {
      width: 50%;
    }

    label {
      font-weight: bold;
      display: block;
      margin-bottom: 0.5em;
    }

    select {
      width: 100%;
      padding: 0.75em;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 1em;
    }

    button {
      background-color: #4CAF50;
      color: white;
      border: none;
      padding: 1em;
      border-radius: 4px;
      cursor: pointer;
      font-size: 1em;
      transition: background-color 0.3s;
    }

    button:hover {
      background-color: #45a049;
    }

    button:disabled {
      background-color: #cccccc;
      cursor: not-allowed;
    }

    .schedule-container {
      margin-top: 2em;
      display: none;
    }

    .schedule-title {
      display: flex;
      align-items: center;
      gap: 0.5em;
      margin-bottom: 1em;
    }

    .schedule-title h2 {
      margin: 0;
      color: #4CAF50;
    }

    .courses-container {
      display: flex;
      gap: 2em;
      margin-bottom: 2em;
    }
    
    .floating-courses {
      position: fixed;
      top: 100px;
      left: 50%;
      transform: translateX(-50%);
      z-index: 1000;
      background-color: rgba(0, 0, 0, 0.2);
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
      padding: 15px;
      max-width: 90%;
      backdrop-filter: blur(10px);
      transition: all 0.3s ease;
    }
    
    .floating-courses.collapsed {
      height: 40px;
      overflow: hidden;
      padding: 10px 15px;
    }
    
    .toggle-courses-btn {
      position: absolute;
      top: 10px;
      right: 10px;
      background-color: rgba(76, 175, 80, 0.8);
      color: white;
      border: none;
      border-radius: 4px;
      width: 30px;
      height: 30px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      z-index: 1001;
      transition: transform 0.3s ease;
    }
    
    .toggle-courses-btn:hover {
      background-color: rgba(76, 175, 80, 1);
    }
    
    .toggle-courses-btn i {
      transition: transform 0.3s ease;
    }
    
    .floating-courses.collapsed .toggle-courses-btn i {
      transform: rotate(180deg);
    }

    .course-column {
      flex: 1;
      border: 1px solid #ddd;
      border-radius: 8px;
      padding: 1em;
      min-height: 200px;
    }

    .course-column h3 {
      margin-top: 0;
      padding-bottom: 0.5em;
      border-bottom: 1px solid #eee;
      color: #4CAF50;
      text-align: center;
    }

    .course-list {
      list-style-type: none;
      padding: 10px;
      margin: 0;
      min-height: 150px;
      overflow-y: auto;
      max-height: 300px;
      display: flex;
      flex-direction: column;
      gap: 0.5em;
    }

    .course-item {
      padding: 0.75em;
      margin-bottom: 0.5em;
      background-color: #f9f9f9;
      border-radius: 4px;
      border-right: 3px solid #4CAF50;
      cursor: grab;
      transition: all 0.2s;
    }

    .course-item:hover {
      background-color: #f0f0f0;
      transform: translateY(-2px);
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .course-item.dragging {
      opacity: 0.5;
      cursor: grabbing;
    }

    .course-item-registered {
      border-right-color: #2196F3;
    }

    .schedule-grid {
      display: flex;
      overflow-x: auto;
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      border: 1px solid #ddd;
    }

    .time-column {
      min-width: 80px;
      border-left: 1px solid #ddd;
      background-color: rgba(76, 175, 80, 0.05);
    }

    .time-header, .day-header {
      text-align: center;
      font-weight: bold;
      padding: 0.75em;
      border-bottom: 1px solid #ddd;
      background-color: #4CAF50;
      color: white;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .time-slot {
      height: 60px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-bottom: 1px solid #ddd;
      color: #666;
      font-weight: 500;
    }

    .days-container {
      display: flex;
      flex: 1;
    }

    .day-column {
      flex: 1;
      min-width: 150px;
      border-left: 1px solid #ddd;
    }

    .day-column:last-child {
      border-left: none;
    }

    .day-lessons {
      display: flex;
      flex-direction: column;
    }

    .time-cell {
      height: 60px;
      border-bottom: 1px solid #ddd;
      padding: 0.25em;
      position: relative;
    }

    .time-cell.conflict {
      background-color: rgba(244, 67, 54, 0.1);
      cursor: not-allowed;
    }

    .lesson-item {
      background-color: rgba(76, 175, 80, 0.1);
      border-radius: 4px;
      padding: 0.5em;
      border-right: 3px solid #4CAF50;
      height: 100%;
      overflow: hidden;
      display: flex;
      flex-direction: column;
      justify-content: center;
    }

    .lesson-item.existing {
      background-color: rgba(33, 150, 243, 0.1);
      border-right: 3px solid #2196F3;
    }

    .lesson-item.conflict {
      background-color: rgba(244, 67, 54, 0.1);
      border-right: 3px solid #F44336;
    }

    .lesson-title {
      font-weight: bold;
      font-size: 0.9rem;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .lesson-time {
      font-size: 0.8rem;
      color: #666;
    }

    .registration-actions {
      margin-top: 2em;
      display: flex;
      justify-content: flex-end;
      gap: 1em;
    }

    .result-container {
      margin-top: 2em;
      display: none;
    }

    .result-success {
      background-color: #e8f5e9;
      border-right: 4px solid #4CAF50;
      padding: 1em;
      margin-bottom: 1em;
      border-radius: 4px;
    }

    .result-error {
      background-color: #ffebee;
      border-right: 4px solid #f44336;
      padding: 1em;
      margin-bottom: 1em;
      border-radius: 4px;
    }

    .conflict-details {
      background-color: #fff8e1;
      padding: 1em;
      margin-top: 0.5em;
      border-radius: 4px;
    }

    .conflict-item {
      margin-bottom: 0.5em;
      padding-bottom: 0.5em;
      border-bottom: 1px solid #ffe0b2;
    }

    .conflict-item:last-child {
      border-bottom: none;
    }
    
    /* Modal styles */
    .modal {
      display: none;
      position: fixed;
      z-index: 2000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgba(0, 0, 0, 0.4);
      animation: fadeIn 0.3s;
    }
    
    .modal-content {
      background-color: #fefefe;
      margin: 10% auto;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      width: 80%;
      max-width: 600px;
      position: relative;
      animation: slideIn 0.3s;
    }
    
    @keyframes fadeIn {
      from {opacity: 0}
      to {opacity: 1}
    }
    
    @keyframes slideIn {
      from {transform: translateY(-50px); opacity: 0;}
      to {transform: translateY(0); opacity: 1;}
    }
    
    .close {
      color: #aaa;
      float: left;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
      position: absolute;
      top: 10px;
      left: 15px;
    }
    
    .close:hover,
    .close:focus {
      color: #333;
      text-decoration: none;
    }

    .student-list {
      list-style-type: none;
      padding: 0;
    }

    .student-item {
      padding: 0.5em 0;
      border-bottom: 1px solid #eee;
    }

    .student-item:last-child {
      border-bottom: none;
    }

    .student-name {
      font-weight: bold;
    }

    .student-email {
      color: #666;
      font-size: 0.9em;
    }

    .legend {
      display: flex;
      gap: 1em;
      margin-top: 1em;
      flex-wrap: wrap;
    }

    .legend-item {
      display: flex;
      align-items: center;
      gap: 0.5em;
      font-size: 0.9em;
    }

    .legend-color {
      width: 20px;
      height: 20px;
      border-radius: 4px;
    }

    .legend-existing {
      background-color: rgba(33, 150, 243, 0.1);
      border-right: 3px solid #2196F3;
    }

    .legend-registered {
      background-color: rgba(76, 175, 80, 0.1);
      border-right: 3px solid #4CAF50;
    }

    .legend-conflict {
      background-color: rgba(244, 67, 54, 0.1);
      border-right: 3px solid #F44336;
    }

    .dropzone {
      border: 2px dashed #ccc;
      border-radius: 4px;
      padding: 1em;
      text-align: center;
      color: #999;
      margin-bottom: 1em;
      transition: all 0.3s;
      min-height: 100px;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 100%;
      box-sizing: border-box;
    }

    .dropzone.active {
      border-color: #4CAF50;
      background-color: rgba(76, 175, 80, 0.05);
    }
    
    .course-list {
      position: relative;
      min-height: 150px;
    }

    @media (max-width: 768px) {
      .courses-container {
        flex-direction: column;
      }
    }
  </style>
</head>
<body>
  <header>
    <h1>רישום תלמיד לקורס</h1>
    <a href="/Management" class="back-button">חזרה</a>
    <a href="/Management" class="main-button"><i class="fas fa-home"></i> מסך ראשי</a>
  </header>
  <main>
    <div class="registration-container">
      <div class="selection-panel">
        <div class="student-selection">
          <label for="student"><i class="fas fa-user-graduate"></i> בחר תלמיד:</label>
          <select name="studentId" id="student" required>
            <option value="">-- בחר תלמיד --</option>
            <% students.forEach(student => { %>
              <option value="<%= student.ID_ %>"><%= student.NAME_STUDENT %> - <%= student.email || 'אין אימייל' %></option>
            <% }); %>
          </select>
        </div>
      </div>

      <div id="scheduleContainer" class="schedule-container">
        <div class="schedule-title">
          <h2><i class="fas fa-calendar-week"></i> מערכת שעות שבועית</h2>
          <span id="studentName" class="student-name"></span>
        </div>
        
        <div id="floatingCoursesContainer" class="courses-container floating-courses">
          <button id="toggleCoursesBtn" class="toggle-courses-btn" title="הסתר/הצג חלון קורסים">
            <i class="fas fa-chevron-up"></i>
          </button>
          <div class="course-column">
            <h3><i class="fas fa-book"></i> קורסים לא רשומים</h3>
            <ul id="availableCourses" class="course-list"></ul>
          </div>
          <div class="course-column">
            <h3><i class="fas fa-check-circle"></i> קורסים רשומים</h3>
            <ul id="registeredCourses" class="course-list"></ul>
          </div>
        </div>
        
        <div class="legend">
          <div class="legend-item">
            <div class="legend-color legend-existing"></div>
            <span>שיעור קיים</span>
          </div>
          <div class="legend-item">
            <div class="legend-color legend-registered"></div>
            <span>שיעור רשום</span>
          </div>
          <div class="legend-item">
            <div class="legend-color legend-conflict"></div>
            <span>חפיפה</span>
          </div>
        </div>
        
        <div class="schedule-grid">
          <div class="time-column">
            <div class="time-header"><i class="fas fa-clock"></i> שעות</div>
            <%
              // Define time slots
              const timeSlots = [
                "08:00", "09:00", "10:00", "11:00", "12:00",
                "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00"
              ];
            %>
            <% timeSlots.forEach(time => { %>
              <div class="time-slot"><%= time %></div>
            <% }); %>
          </div>
          
          <div class="days-container" id="daysContainer">
            <!-- Will be filled dynamically -->
          </div>
        </div>
        
        <div class="registration-actions">
          <button type="button" id="saveBtn">
            <i class="fas fa-save"></i> שמור שינויים
          </button>
        </div>
      </div>

      <div id="resultContainer" class="result-container">
        <h2>תוצאות הרישום</h2>
        <div id="successResults"></div>
        <div id="errorResults"></div>
      </div>
    </div>
  </main>
  <script>
    // Global variables
    let studentSchedule = [];
    let allCourses = [];
    let registeredCourses = [];
    let availableCourses = [];
    let days = ['ראשון', 'שני', 'שלישי', 'רביעי', 'חמישי', 'שישי'];
    
    // DOM elements
    const studentSelect = document.getElementById('student');
    const scheduleContainer = document.getElementById('scheduleContainer');
    const daysContainer = document.getElementById('daysContainer');
    const studentNameElement = document.getElementById('studentName');
    const availableCoursesElement = document.getElementById('availableCourses');
    const registeredCoursesElement = document.getElementById('registeredCourses');
    const saveBtn = document.getElementById('saveBtn');
    const resultContainer = document.getElementById('resultContainer');
    
    // Time slots
    const timeSlots = [
      "08:00", "09:00", "10:00", "11:00", "12:00",
      "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00"
    ];
    
    // Event listeners
    studentSelect.addEventListener('change', handleStudentChange);
    saveBtn.addEventListener('click', saveChanges);
    
    // Toggle courses container
    const toggleCoursesBtn = document.getElementById('toggleCoursesBtn');
    const floatingCoursesContainer = document.getElementById('floatingCoursesContainer');
    
    toggleCoursesBtn.addEventListener('click', function() {
      floatingCoursesContainer.classList.toggle('collapsed');
    });
    
    // Initialize drag and drop
    function initDragAndDrop() {
      const courseItems = document.querySelectorAll('.course-item');
      const dropZones = document.querySelectorAll('.course-list');
      
      // Make the course columns drop targets as well
      const courseColumns = document.querySelectorAll('.course-column');
      courseColumns.forEach(column => {
        const listId = column.querySelector('.course-list').id;
        column.dataset.listId = listId;
        setupDropListeners(column);
      });
      
      // Add empty dropzone to each list to allow dropping when list is empty
      dropZones.forEach(zone => {
        // Create a dropzone element that will be visible when the list is empty
        const emptyDropzone = document.createElement('div');
        emptyDropzone.className = 'dropzone';
        emptyDropzone.textContent = 'גרור קורסים לכאן';
        emptyDropzone.dataset.parentList = zone.id;
        
        // Only show the dropzone if the list is empty
        if (zone.children.length === 0) {
          zone.appendChild(emptyDropzone);
        }
        
        // Add dragover, dragleave, and drop event listeners to the empty dropzone
        setupDropListeners(emptyDropzone);
      });
      
      courseItems.forEach(item => {
        item.setAttribute('draggable', true);
        
        item.addEventListener('dragstart', function(e) {
          e.dataTransfer.setData('text/plain', item.dataset.courseId);
          item.classList.add('dragging');
          setTimeout(() => {
            item.style.display = 'none';
          }, 0);
        });
        
        item.addEventListener('dragend', function() {
          item.classList.remove('dragging');
          item.style.display = 'block';
        });
      });
      
      // Setup drop listeners for the course lists
      dropZones.forEach(zone => {
        setupDropListeners(zone);
      });
    }
    
    // Function to set up drop listeners for both course lists and empty dropzones
    function setupDropListeners(element) {
      element.addEventListener('dragover', function(e) {
        e.preventDefault();
        element.classList.add('active');
      });
      
      element.addEventListener('dragleave', function() {
        element.classList.remove('active');
      });
      
      element.addEventListener('drop', function(e) {
        e.preventDefault();
        element.classList.remove('active');
        
        const courseId = e.dataTransfer.getData('text/plain');
        if (!courseId) return; // No valid course ID found
        
        const courseItem = document.querySelector(`.course-item[data-course-id="${courseId}"]`);
        if (!courseItem) return; // Course item not found
        
        // Determine which list this element belongs to
        let targetList;
        
        if (element.classList.contains('dropzone')) {
          // If dropped on an empty dropzone, use its parent list ID
          targetList = element.dataset.parentList;
        } else if (element.classList.contains('course-list')) {
          // If dropped directly on a list
          targetList = element.id;
        } else if (element.classList.contains('course-column')) {
          // If dropped on a course column
          targetList = element.dataset.listId;
        } else if (element.closest('.course-column')) {
          // If dropped on an element inside a course column
          targetList = element.closest('.course-column').dataset.listId;
        } else {
          // Fallback - try to find the closest list
          const closestList = element.closest('.course-list');
          if (closestList) {
            targetList = closestList.id;
          } else {
            return; // No valid target found
          }
        }
        
        // Get the actual list element
        const listElement = document.getElementById(targetList);
        if (!listElement) return; // List element not found
        
        // Remove any empty dropzone if it exists
        const emptyDropzone = listElement.querySelector('.dropzone');
        if (emptyDropzone) {
          listElement.removeChild(emptyDropzone);
        }
        
        if (targetList === 'registeredCourses') {
          // Move to registered courses
          if (courseItem.parentElement.id !== 'registeredCourses') {
            registeredCoursesElement.appendChild(courseItem);
            courseItem.classList.add('course-item-registered');
            
            // Update data structures
            const courseIndex = availableCourses.findIndex(c => c.ID_COURSE.toString() === courseId);
            if (courseIndex !== -1) {
              const course = availableCourses.splice(courseIndex, 1)[0];
              registeredCourses.push(course);
            }
            
            // Add empty dropzone to available courses if it's now empty
            if (availableCoursesElement.children.length === 0) {
              const newEmptyDropzone = document.createElement('div');
              newEmptyDropzone.className = 'dropzone';
              newEmptyDropzone.textContent = 'גרור קורסים לכאן';
              newEmptyDropzone.dataset.parentList = 'availableCourses';
              setupDropListeners(newEmptyDropzone);
              availableCoursesElement.appendChild(newEmptyDropzone);
            }
          }
        } else if (targetList === 'availableCourses') {
          // Move to available courses
          if (courseItem.parentElement.id !== 'availableCourses') {
            availableCoursesElement.appendChild(courseItem);
            courseItem.classList.remove('course-item-registered');
            
            // Update data structures
            const courseIndex = registeredCourses.findIndex(c => c.ID_COURSE.toString() === courseId);
            if (courseIndex !== -1) {
              const course = registeredCourses.splice(courseIndex, 1)[0];
              availableCourses.push(course);
            }
            
            // Add empty dropzone to registered courses if it's now empty
            if (registeredCoursesElement.children.length === 0) {
              const newEmptyDropzone = document.createElement('div');
              newEmptyDropzone.className = 'dropzone';
              newEmptyDropzone.textContent = 'גרור קורסים לכאן';
              newEmptyDropzone.dataset.parentList = 'registeredCourses';
              setupDropListeners(newEmptyDropzone);
              registeredCoursesElement.appendChild(newEmptyDropzone);
            }
          }
        }
        
        // Update schedule display
        updateScheduleDisplay();
      });
    }
    
    // Functions
    async function handleStudentChange() {
      const studentId = studentSelect.value;
      if (!studentId) {
        scheduleContainer.style.display = 'none';
        return;
      }
      
      try {
        // Get student name for display
        const studentOption = studentSelect.options[studentSelect.selectedIndex];
        studentNameElement.textContent = studentOption.textContent;
        
        // Fetch student schedule
        const response = await fetch(`/Management/student-schedule/${studentId}`);
        if (response.ok) {
          const data = await response.json();
          studentSchedule = data.schedule;
          
          // Fetch all courses
          const coursesResponse = await fetch('/Management/all-courses');
          if (coursesResponse.ok) {
            const coursesData = await coursesResponse.json();
            allCourses = coursesData.courses;
            
            // Determine registered and available courses
            registeredCourses = allCourses.filter(course => 
              studentSchedule.some(lesson => lesson.ID_COURSE === course.ID_COURSE)
            );
            
            availableCourses = allCourses.filter(course => 
              !registeredCourses.some(rc => rc.ID_COURSE === course.ID_COURSE)
            );
            
            // Populate course lists
            populateCourseLists();
            
            // Show schedule container
            scheduleContainer.style.display = 'block';
            
            // Update schedule display
            updateScheduleDisplay();
            
            // Initialize drag and drop
            initDragAndDrop();
          } else {
            alert('שגיאה בטעינת רשימת הקורסים');
          }
        } else {
          alert('שגיאה בטעינת מערכת השעות של התלמיד');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('שגיאה בטעינת נתוני התלמיד');
      }
    }
    
    function populateCourseLists() {
      // Clear lists
      availableCoursesElement.innerHTML = '';
      registeredCoursesElement.innerHTML = '';
      
      // Populate available courses
      if (availableCourses.length === 0) {
        const emptyDropzone = document.createElement('div');
        emptyDropzone.className = 'dropzone';
        emptyDropzone.textContent = 'גרור קורסים לכאן';
        emptyDropzone.dataset.parentList = 'availableCourses';
        setupDropListeners(emptyDropzone);
        availableCoursesElement.appendChild(emptyDropzone);
      } else {
        availableCourses.forEach(course => {
          const courseItem = document.createElement('li');
          courseItem.className = 'course-item';
          courseItem.dataset.courseId = course.ID_COURSE;
          courseItem.innerHTML = `<i class="fas fa-book"></i> ${course.Name_Course}`;
          availableCoursesElement.appendChild(courseItem);
        });
      }
      
      // Populate registered courses
      if (registeredCourses.length === 0) {
        const emptyDropzone = document.createElement('div');
        emptyDropzone.className = 'dropzone';
        emptyDropzone.textContent = 'גרור קורסים לכאן';
        emptyDropzone.dataset.parentList = 'registeredCourses';
        setupDropListeners(emptyDropzone);
        registeredCoursesElement.appendChild(emptyDropzone);
      } else {
        registeredCourses.forEach(course => {
          const courseItem = document.createElement('li');
          courseItem.className = 'course-item course-item-registered';
          courseItem.dataset.courseId = course.ID_COURSE;
          courseItem.innerHTML = `<i class="fas fa-book"></i> ${course.Name_Course}`;
          registeredCoursesElement.appendChild(courseItem);
        });
      }
    }
    
    async function updateScheduleDisplay() {
      // Clear days container
      daysContainer.innerHTML = '';
      
      // Ensure all registered courses have their schedules
      await Promise.all(registeredCourses.map(async (course) => {
        if (!course.schedule) {
          try {
            const response = await fetch(`/Management/course-schedule/${course.ID_COURSE}`);
            if (response.ok) {
              const data = await response.json();
              course.schedule = data.schedule;
            }
          } catch (error) {
            console.error('Error fetching course schedule:', error);
            course.schedule = [];
          }
        }
      }));
      
      // Create day columns
      days.forEach((day, dayIndex) => {
        const dayColumn = document.createElement('div');
        dayColumn.className = 'day-column';
        
        const dayHeader = document.createElement('div');
        dayHeader.className = 'day-header';
        dayHeader.innerHTML = `<i class="fas fa-calendar-day"></i> ${day}`;
        dayColumn.appendChild(dayHeader);
        
        const dayLessons = document.createElement('div');
        dayLessons.className = 'day-lessons';
        
        // Create time cells for each time slot
        timeSlots.forEach(timeSlot => {
          const timeCell = document.createElement('div');
          timeCell.className = 'time-cell';
          timeCell.dataset.day = dayIndex;
          timeCell.dataset.time = timeSlot;
          
          // Get all lessons for this time slot
          const lessonsAtThisTime = [];
          
          // Check registered courses
          for (const course of registeredCourses) {
            // Check if this course has a lesson at this time slot
            if (course.schedule) {
              const lesson = course.schedule.find(l => {
                const lessonDate = new Date(l.LESSON_DATE);
                return lessonDate.getDay() === dayIndex &&
                      l.start_time <= timeSlot &&
                      l.end_time > timeSlot;
              });
              
              if (lesson) {
                lessonsAtThisTime.push({
                  course,
                  lesson,
                  type: 'registered'
                });
              }
            }
          }
          
          // Check for conflicts
          const hasConflict = lessonsAtThisTime.length > 1;
          
          if (lessonsAtThisTime.length > 0) {
            // Display the first lesson (or the conflicting lessons)
            const lessonInfo = lessonsAtThisTime[0];
            
            const lessonItem = document.createElement('div');
            lessonItem.className = `lesson-item ${hasConflict ? 'conflict' : (lessonInfo.type === 'registered' ? 'existing' : '')}`;
            
            const lessonTitle = document.createElement('div');
            lessonTitle.className = 'lesson-title';
            lessonTitle.innerHTML = `<i class="fas fa-book"></i> ${lessonInfo.course.Name_Course}`;
            lessonItem.appendChild(lessonTitle);
            
            const lessonTime = document.createElement('div');
            lessonTime.className = 'lesson-time';
            lessonTime.innerHTML = `<i class="far fa-clock"></i> ${lessonInfo.lesson.start_time} - ${lessonInfo.lesson.end_time}`;
            lessonItem.appendChild(lessonTime);
            
            timeCell.appendChild(lessonItem);
            
            if (hasConflict) {
              timeCell.classList.add('conflict');
              
              // Add tooltip with conflict information
              let conflictTooltip = 'חפיפה בין קורסים: ';
              lessonsAtThisTime.forEach((l, i) => {
                if (i > 0) conflictTooltip += ', ';
                conflictTooltip += l.course.Name_Course;
              });
              timeCell.title = conflictTooltip;
            }
          }
          
          dayLessons.appendChild(timeCell);
        });
        
        dayColumn.appendChild(dayLessons);
        daysContainer.appendChild(dayColumn);
      });
    }
    
    async function saveChanges() {
      const studentId = studentSelect.value;
      
      if (!studentId) {
        alert('יש לבחור תלמיד');
        return;
      }
      
      // Check for conflicts
      const conflicts = await checkForConflicts();
      
      if (conflicts.length > 0) {
        // Create a modal popup for conflicts instead of using the result container
        showConflictModal(conflicts);
        return;
      }
      
      try {
        // Get current registrations
        const currentRegistrations = registeredCourses.map(course => course.ID_COURSE);
        
        // Send update request
        const response = await fetch('/Management/update-student-courses', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            studentId,
            courseIds: currentRegistrations
          })
        });
        
        if (response.ok) {
          const data = await response.json();
          showSuccessModal(data);
          
          // Add a slight delay before redirecting to ensure the success message is seen
          setTimeout(() => {
            window.location.href = '/Management/register-student-course';
          }, 1500);
        } else {
          const errorData = await response.json();
          alert(`הייתה בעיה בעדכון הקורסים: ${errorData.error}`);
        }
      } catch (error) {
        console.error('Error:', error);
        alert('הייתה בעיה בעדכון הקורסים.');
      }
    }
    
    async function checkForConflicts() {
      const conflicts = [];
      
      // Ensure all registered courses have their schedules
      for (const course of registeredCourses) {
        if (!course.schedule) {
          try {
            const response = await fetch(`/Management/course-schedule/${course.ID_COURSE}`);
            if (response.ok) {
              const data = await response.json();
              course.schedule = data.schedule;
            }
          } catch (error) {
            console.error('Error fetching course schedule:', error);
            course.schedule = [];
          }
        }
      }
      
      // Check for time conflicts between registered courses
      for (let i = 0; i < registeredCourses.length; i++) {
        const course1 = registeredCourses[i];
        
        for (let j = i + 1; j < registeredCourses.length; j++) {
          const course2 = registeredCourses[j];
          
          // Check for overlaps in schedules
          for (const lesson1 of course1.schedule || []) {
            for (const lesson2 of course2.schedule || []) {
              // Check if lessons are on the same day
              const date1 = new Date(lesson1.LESSON_DATE);
              const date2 = new Date(lesson2.LESSON_DATE);
              
              if (date1.getDay() === date2.getDay()) {
                // Parse times to compare
                const start1 = new Date(`2000-01-01T${lesson1.start_time}`);
                const end1 = new Date(`2000-01-01T${lesson1.end_time}`);
                const start2 = new Date(`2000-01-01T${lesson2.start_time}`);
                const end2 = new Date(`2000-01-01T${lesson2.end_time}`);
                
                // Check for overlap - ensure there's a real overlap
                if (start1 < end2 && start2 < end1) {
                  conflicts.push({
                    date: lesson1.LESSON_DATE,
                    day: days[date1.getDay()],
                    course1: course1.Name_Course,
                    time1: `${lesson1.start_time} - ${lesson1.end_time}`,
                    course2: course2.Name_Course,
                    time2: `${lesson2.start_time} - ${lesson2.end_time}`
                  });
                }
              }
            }
          }
        }
      }
      
      return conflicts;
    }
    
    // Create modal for conflicts
    function showConflictModal(conflicts) {
      // Create modal container if it doesn't exist
      let modalContainer = document.getElementById('conflictModal');
      if (!modalContainer) {
        modalContainer = document.createElement('div');
        modalContainer.id = 'conflictModal';
        modalContainer.className = 'modal';
        document.body.appendChild(modalContainer);
      }
      
      // Clear previous content
      modalContainer.innerHTML = '';
      
      // Create modal content
      const modalContent = document.createElement('div');
      modalContent.className = 'modal-content';
      
      // Add close button
      const closeBtn = document.createElement('span');
      closeBtn.className = 'close';
      closeBtn.innerHTML = '&times;';
      closeBtn.onclick = function() {
        modalContainer.style.display = 'none';
      };
      modalContent.appendChild(closeBtn);
      
      // Add title
      const title = document.createElement('h3');
      title.innerHTML = '<i class="fas fa-exclamation-triangle"></i> לא ניתן לשמור את השינויים עקב חפיפות במערכת';
      modalContent.appendChild(title);
      
      // Add conflicts
      const conflictTitle = document.createElement('p');
      conflictTitle.textContent = 'חפיפות שנמצאו:';
      modalContent.appendChild(conflictTitle);
      
      conflicts.forEach(conflict => {
        const conflictItem = document.createElement('div');
        conflictItem.className = 'conflict-item';
        
        const conflictDay = document.createElement('p');
        conflictDay.textContent = `יום: ${conflict.day}`;
        conflictItem.appendChild(conflictDay);
        
        const course1 = document.createElement('p');
        course1.textContent = `קורס: ${conflict.course1} (${conflict.time1})`;
        conflictItem.appendChild(course1);
        
        const course2 = document.createElement('p');
        course2.textContent = `חופף עם: ${conflict.course2} (${conflict.time2})`;
        conflictItem.appendChild(course2);
        
        modalContent.appendChild(conflictItem);
      });
      
      // Add button to close modal
      const closeButton = document.createElement('button');
      closeButton.className = 'btn';
      closeButton.textContent = 'סגור';
      closeButton.onclick = function() {
        modalContainer.style.display = 'none';
      };
      modalContent.appendChild(closeButton);
      
      // Add modal content to container
      modalContainer.appendChild(modalContent);
      
      // Show modal
      modalContainer.style.display = 'block';
      
      // Close modal when clicking outside
      window.onclick = function(event) {
        if (event.target == modalContainer) {
          modalContainer.style.display = 'none';
        }
      };
    }
    
    // Create modal for success
    function showSuccessModal(data) {
      // Create modal container if it doesn't exist
      let modalContainer = document.getElementById('successModal');
      if (!modalContainer) {
        modalContainer = document.createElement('div');
        modalContainer.id = 'successModal';
        modalContainer.className = 'modal';
        document.body.appendChild(modalContainer);
      }
      
      // Clear previous content
      modalContainer.innerHTML = '';
      
      // Create modal content
      const modalContent = document.createElement('div');
      modalContent.className = 'modal-content';
      
      // Add close button
      const closeBtn = document.createElement('span');
      closeBtn.className = 'close';
      closeBtn.innerHTML = '&times;';
      closeBtn.onclick = function() {
        modalContainer.style.display = 'none';
      };
      modalContent.appendChild(closeBtn);
      
      // Add title
      const title = document.createElement('h3');
      title.innerHTML = '<i class="fas fa-check-circle"></i> הקורסים עודכנו בהצלחה';
      modalContent.appendChild(title);
      
      // Add details
      const studentOption = studentSelect.options[studentSelect.selectedIndex];
      const detailsP = document.createElement('p');
      detailsP.innerHTML = `<strong>תלמיד:</strong> ${studentOption.textContent}<br>
                           <strong>מספר קורסים:</strong> ${registeredCourses.length}`;
      modalContent.appendChild(detailsP);
      
      // Show modal
      modalContainer.appendChild(modalContent);
      modalContainer.style.display = 'block';
      
      // Close modal when clicking outside
      window.onclick = function(event) {
        if (event.target == modalContainer) {
          modalContainer.style.display = 'none';
        }
      };
    }
    
    // Keep these functions for backward compatibility
    function displayConflictErrors(conflicts) {
      showConflictModal(conflicts);
    }
    
    function displaySuccessResults(data) {
      showSuccessModal(data);
    }
  </script>
</body>
</html>
